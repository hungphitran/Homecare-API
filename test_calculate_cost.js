const axios = require('axios');

// Test scenarios
const testScenarios = [
    {
        name: "Invalid serviceId format",
        data: {
            "serviceId": "string", // Invalid ObjectId format
            "startTime": "2025-08-03T06:30:00.000Z",
            "endTime": "2025-08-03T08:30:00.000Z",
            "workDate": "2025-08-03",
            "location": {
                "province": "string",
                "district": "string",
                "ward": "string"
            }
        },
        expectedError: true
    },
    {
        name: "With serviceTitle (recommended)",
        data: {
            "serviceTitle": "ChƒÉm s√≥c ng∆∞·ªùi gi√†", // Update with actual service title from your database
            "startTime": "2025-08-03T06:30:00.000Z", 
            "endTime": "2025-08-03T08:30:00.000Z",
            "workDate": "2025-08-03",
            "location": {
                "province": "string",
                "district": "string",
                "ward": "string"
            }
        },
        expectedError: false
    },
    {
        name: "Direct time format",
        data: {
            "serviceTitle": "ChƒÉm s√≥c ng∆∞·ªùi gi√†",
            "startTime": "06:30",
            "endTime": "08:30", 
            "workDate": "2025-08-03",
            "location": {
                "province": "H·ªì Ch√≠ Minh",
                "district": "Qu·∫≠n 1",
                "ward": "Ph∆∞·ªùng B·∫øn Ngh√©"
            }
        },
        expectedError: false
    },
    {
        name: "Weekend calculation",
        data: {
            "serviceTitle": "ChƒÉm s√≥c ng∆∞·ªùi gi√†",
            "startTime": "2025-08-02T06:30:00.000Z", // Saturday
            "endTime": "2025-08-02T08:30:00.000Z",
            "workDate": "2025-08-02",
            "location": {
                "province": "H·ªì Ch√≠ Minh",
                "district": "Qu·∫≠n 1", 
                "ward": "Ph∆∞·ªùng B·∫øn Ngh√©"
            }
        },
        expectedError: false
    },
    {
        name: "Missing required parameters",
        data: {
            "startTime": "2025-08-03T06:30:00.000Z",
            "endTime": "2025-08-03T08:30:00.000Z",
            // Missing serviceTitle/serviceId and workDate
            "location": {
                "province": "string",
                "district": "string",
                "ward": "string"
            }
        },
        expectedError: true
    }
];

async function testCalculateCost(scenario) {
    try {
        console.log(`\nüß™ Testing: ${scenario.name}`);
        console.log('üì§ Request data:', JSON.stringify(scenario.data, null, 2));
        
        // Update this URL based on your actual server configuration
        const baseURL = process.env.API_URL || 'http://localhost:3000';
        const response = await axios.post(`${baseURL}/api/request/calculateCost`, scenario.data);
        
        if (scenario.expectedError) {
            console.log('‚ö†Ô∏è  Expected error but got success response:');
        } else {
            console.log('‚úÖ Success Response:');
        }
        console.log('üì• Response data:', JSON.stringify(response.data, null, 2));
        
        // Analyze the response structure
        if (response.data && typeof response.data === 'object') {
            console.log('\nüìä Cost Breakdown:');
            if (response.data.totalCost) console.log(`üí∞ Total Cost: ${response.data.totalCost}`);
            if (response.data.servicePrice) console.log(`üè∑Ô∏è  Service Price: ${response.data.servicePrice}`);
            if (response.data.HSDV) console.log(`‚öôÔ∏è  Service Factor (HSDV): ${response.data.HSDV}`);
            if (response.data.HSovertime) console.log(`üïê Overtime Factor: ${response.data.HSovertime}`);
            if (response.data.HScuoituan) console.log(`üìÖ Weekend Factor: ${response.data.HScuoituan}`);
            if (response.data.isWeekend !== undefined) console.log(`üóìÔ∏è  Is Weekend: ${response.data.isWeekend}`);
            if (response.data.totalOvertimeHours) console.log(`‚è∞ Overtime Hours: ${response.data.totalOvertimeHours}`);
            if (response.data.totalNormalHours) console.log(`üïí Normal Hours: ${response.data.totalNormalHours}`);
            if (response.data.overtimeCost) console.log(`üíµ Overtime Cost: ${response.data.overtimeCost}`);
            if (response.data.normalCost) console.log(`üí¥ Normal Cost: ${response.data.normalCost}`);
        }
        
    } catch (error) {
        if (scenario.expectedError) {
            console.log('‚úÖ Expected error occurred:');
        } else {
            console.log('‚ùå Unexpected error occurred:');
        }
        
        if (error.response) {
            console.log(`üìõ Status: ${error.response.status}`);
            console.log('üì• Error data:', JSON.stringify(error.response.data, null, 2));
        } else if (error.request) {
            console.log('üì° No response received. Is the server running?');
            console.log('üí° Try starting the server with: npm run dev');
        } else {
            console.log('‚ö†Ô∏è  Error:', error.message);
        }
    }
}

async function runAllTests() {
    console.log('üöÄ Starting Cost Calculation Endpoint Tests');
    console.log('=' .repeat(50));
    
    for (const scenario of testScenarios) {
        await testCalculateCost(scenario);
        console.log('-'.repeat(50));
    }
    
    console.log('\nüìã Test Summary:');
    console.log('‚Ä¢ Make sure to update serviceTitle with actual values from your database');
    console.log('‚Ä¢ Ensure the server is running on the correct port');
    console.log('‚Ä¢ Check database connection and required collections exist');
    console.log('\nüí° Tips:');
    console.log('‚Ä¢ Use serviceTitle instead of serviceId for easier testing');
    console.log('‚Ä¢ ISO timestamp format (with T and Z) is supported');
    console.log('‚Ä¢ Direct time format (HH:mm) is also supported');
    console.log('‚Ä¢ Weekend dates will apply weekend coefficients');
}

// Run all tests
runAllTests();
