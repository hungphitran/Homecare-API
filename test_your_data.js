const http = require('http');

// Test with your exact original data but using a valid service
function testOriginalDataFixed() {
    const testData = {
        "serviceTitle": "ChƒÉm s√≥c ng∆∞·ªùi gi√†", // Using a real service from the database
        "startTime": "2025-08-03T06:30:00.000Z",
        "endTime": "2025-08-03T08:30:00.000Z",
        "workDate": "2025-08-03",
        "location": {
            "province": "string",
            "district": "string",
            "ward": "string"
        }
    };

    const postData = JSON.stringify(testData);
    
    const options = {
        hostname: 'localhost',
        port: 3000,
        path: '/request/calculateCost',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': Buffer.byteLength(postData)
        }
    };

    console.log('üß™ Testing your original data format with valid service');
    console.log('üì§ Request data:', JSON.stringify(testData, null, 2));

    const req = http.request(options, (res) => {
        let responseData = '';

        res.on('data', (chunk) => {
            responseData += chunk;
        });

        res.on('end', () => {
            console.log(`üì• Response Status: ${res.statusCode}`);
            try {
                const result = JSON.parse(responseData);
                console.log('üì• Response data:', JSON.stringify(result, null, 2));
                
                if (result.totalCost) {
                    console.log('\nüìä Detailed Cost Analysis:');
                    console.log(`üí∞ Total Cost: ${result.totalCost} VND`);
                    console.log(`üè∑Ô∏è  Base Service Price: ${result.servicePrice} VND`);
                    console.log(`‚öôÔ∏è  Service Coefficient (HSDV): ${result.HSDV}`);
                    console.log(`üïê Overtime Coefficient: ${result.HSovertime}`);
                    console.log(`üìÖ Weekend Coefficient: ${result.HScuoituan}`);
                    console.log(`üóìÔ∏è  Is Weekend: ${result.isWeekend}`);
                    console.log(`‚è∞ Total Overtime Hours: ${result.totalOvertimeHours}`);
                    console.log(`üïí Total Normal Hours: ${result.totalNormalHours}`);
                    console.log(`üíµ Overtime Cost Component: ${result.overtimeCost}`);
                    console.log(`üí¥ Normal Cost Component: ${result.normalCost}`);
                    console.log(`üî¢ Applied Weekend Coefficient: ${result.applicableWeekendCoefficient}`);
                    
                    console.log('\nüîç Calculation Formula Analysis:');
                    console.log('Formula: totalCost = servicePrice √ó HSDV √ó (overtimeComponent + normalComponent)');
                    console.log(`Where:`);
                    console.log(`‚Ä¢ overtimeComponent = HSovertime √ó overtimeHours √ó weekendCoeff = ${result.HSovertime} √ó ${result.totalOvertimeHours} √ó ${result.applicableWeekendCoefficient} = ${result.overtimeCost}`);
                    console.log(`‚Ä¢ normalComponent = weekendCoeff √ó normalHours = ${result.applicableWeekendCoefficient} √ó ${result.totalNormalHours} = ${result.normalCost}`);
                    console.log(`‚Ä¢ Final: ${result.servicePrice} √ó ${result.HSDV} √ó (${result.overtimeCost} + ${result.normalCost}) = ${result.totalCost}`);
                    
                    console.log('\n‚úÖ Your endpoint is working correctly!');
                    console.log('\nüìù Recommendations for your original data:');
                    console.log('‚ùå Issue: serviceId: "string" is not a valid ObjectId');
                    console.log('‚úÖ Solution: Use serviceTitle instead, or provide a valid MongoDB ObjectId');
                    console.log('‚úÖ Time format: Your ISO timestamp format is supported');
                    console.log('‚úÖ Weekend detection: August 3, 2025 is correctly identified as Saturday');
                }
            } catch (error) {
                console.log('üì• Raw response:', responseData);
            }
        });
    });

    req.on('error', (error) => {
        console.log('‚ùå Request error:', error.message);
    });

    req.write(postData);
    req.end();
}

// Test the problematic serviceId format
function testInvalidServiceId() {
    const testData = {
        "serviceId": "string", // This should fail
        "startTime": "2025-08-03T06:30:00.000Z",
        "endTime": "2025-08-03T08:30:00.000Z",
        "workDate": "2025-08-03",
        "location": {
            "province": "string",
            "district": "string",
            "ward": "string"
        }
    };

    const postData = JSON.stringify(testData);
    
    const options = {
        hostname: 'localhost',
        port: 3000,
        path: '/request/calculateCost',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': Buffer.byteLength(postData)
        }
    };

    console.log('\nüß™ Testing invalid serviceId format (should show error)');
    console.log('üì§ Request data:', JSON.stringify(testData, null, 2));

    const req = http.request(options, (res) => {
        let responseData = '';

        res.on('data', (chunk) => {
            responseData += chunk;
        });

        res.on('end', () => {
            console.log(`üì• Response Status: ${res.statusCode}`);
            try {
                const result = JSON.parse(responseData);
                console.log('üì• Response data:', JSON.stringify(result, null, 2));
            } catch (error) {
                console.log('üì• Raw response:', responseData);
            }
        });
    });

    req.on('error', (error) => {
        console.log('‚ùå Request error:', error.message);
    });

    req.write(postData);
    req.end();
}

testOriginalDataFixed();
setTimeout(testInvalidServiceId, 2000);
