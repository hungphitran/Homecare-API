const mongoose = require('mongoose');
const Location = require('../model/location.model');
require('dotenv').config();

// K·∫øt n·ªëi MongoDB
const connectDB = async () => {
    try {
        await mongoose.connect(process.env.MONGO_URL, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });
        console.log('Connected to MongoDB', mongoose.connection.name);
    } catch (error) {
        console.error('MongoDB connection error:', error);
        process.exit(1);
    }
};

// X√≥a t·∫•t c·∫£ locations
const clearLocations = async () => {
    try {
        const result = await Location.deleteMany({});
        console.log(`‚úÖ ƒê√£ x√≥a ${result.deletedCount} locations`);
    } catch (error) {
        console.error('‚ùå L·ªói khi x√≥a locations:', error);
    }
};

// D·ªØ li·ªáu m·∫´u locations
const sampleLocations = [
    {
        name: "H√† N·ªôi",
        status: "active",
        wards: [
            { name: "Ph∆∞·ªùng C·∫ßu D·ªÅn" },
            { name: "Ph∆∞·ªùng Ng·ªçc Kh√°nh" },
            { name: "Ph∆∞·ªùng Ph√∫c X√°" },
            { name: "Ph∆∞·ªùng Tr√∫c B·∫°ch" },
            { name: "Ph∆∞·ªùng Vƒ©nh Ph√∫c" },
            { name: "Ph∆∞·ªùng C·ªëng V·ªã" },
            { name: "Ph∆∞·ªùng Li·ªÖu Giai" },
            { name: "Ph∆∞·ªùng Nguy·ªÖn Trung Tr·ª±c" },
            { name: "Ph∆∞·ªùng Qu√°n Th√°nh" },
            { name: "Ph∆∞·ªùng Th√†nh C√¥ng" },
            { name: "Ph∆∞·ªùng ƒê·ªôi C·∫•n" },
            { name: "Ph∆∞·ªùng Ng·ªçc H√†" },
            { name: "Ph∆∞·ªùng Kim M√£" },
            { name: "Ph∆∞·ªùng Gi·∫£ng V√µ" },
            { name: "Ph∆∞·ªùng C√°t Linh" }
        ]
    },
    {
        name: "H·ªì Ch√≠ Minh",
        status: "active",
        wards: [
            { name: "Ph∆∞·ªùng B·∫øn Ngh√©" },
            { name: "Ph∆∞·ªùng B·∫øn Th√†nh" },
            { name: "Ph∆∞·ªùng C·∫ßu Kho" },
            { name: "Ph∆∞·ªùng C·∫ßu √îng L√£nh" },
            { name: "Ph∆∞·ªùng C√¥ Giang" },
            { name: "Ph∆∞·ªùng ƒêa Kao" },
            { name: "Ph∆∞·ªùng Nguy·ªÖn C∆∞ Trinh" },
            { name: "Ph∆∞·ªùng Nguy·ªÖn Th√°i B√¨nh" },
            { name: "Ph∆∞·ªùng Ph·∫°m Ng≈© L√£o" },
            { name: "Ph∆∞·ªùng T√¢n ƒê·ªãnh" },
            { name: "Ph∆∞·ªùng 1" },
            { name: "Ph∆∞·ªùng 2" },
            { name: "Ph∆∞·ªùng 3" },
            { name: "Ph∆∞·ªùng 4" },
            { name: "Ph∆∞·ªùng 5" }
        ]
    },
    {
        name: "ƒê√† N·∫µng",
        status: "active",
        wards: [
            { name: "Ph∆∞·ªùng Thanh B√¨nh" },
            { name: "Ph∆∞·ªùng Thu·∫≠n Ph∆∞·ªõc" },
            { name: "Ph∆∞·ªùng Th·∫°ch Thang" },
            { name: "Ph∆∞·ªùng H·∫£i Ch√¢u I" },
            { name: "Ph∆∞·ªùng H·∫£i Ch√¢u II" },
            { name: "Ph∆∞·ªùng Ph∆∞·ªõc Ninh" },
            { name: "Ph∆∞·ªùng H√≤a Thu·∫≠n T√¢y" },
            { name: "Ph∆∞·ªùng H√≤a Thu·∫≠n ƒê√¥ng" },
            { name: "Ph∆∞·ªùng Tam Thu·∫≠n" },
            { name: "Ph∆∞·ªùng Thanh Kh√™ T√¢y" },
            { name: "Ph∆∞·ªùng Thanh Kh√™ ƒê√¥ng" },
            { name: "Ph∆∞·ªùng Xu√¢n H√†" },
            { name: "Ph∆∞·ªùng T√¢n Ch√≠nh" },
            { name: "Ph∆∞·ªùng Ch√≠nh Gi√°n" },
            { name: "Ph∆∞·ªùng Vƒ©nh Trung" }
        ]
    },
    {
        name: "H·∫£i Ph√≤ng",
        status: "active",
        wards: [
            { name: "Ph∆∞·ªùng M√°y Chai" },
            { name: "Ph∆∞·ªùng M√°y T∆°" },
            { name: "Ph∆∞·ªùng Ng·ªçc Xuy√™n" },
            { name: "Ph∆∞·ªùng C·∫ßu Tre" },
            { name: "Ph∆∞·ªùng C·∫ßu ƒê·∫•t" },
            { name: "Ph∆∞·ªùng Ni·ªám Nghƒ©a" },
            { name: "Ph∆∞·ªùng Nghƒ©a X√°" },
            { name: "Ph∆∞·ªùng D∆∞ H√†ng" },
            { name: "Ph∆∞·ªùng L·∫°ch Tray" },
            { name: "Ph∆∞·ªùng ƒê√¥ng Kh√™" }
        ]
    },
    {
        name: "C·∫ßn Th∆°",
        status: "active",
        wards: [
            { name: "Ph∆∞·ªùng T√¢n An" },
            { name: "Ph∆∞·ªùng An Ph√∫" },
            { name: "Ph∆∞·ªùng T√¢n Phong" },
            { name: "Ph∆∞·ªùng C√°i Kh·∫ø" },
            { name: "Ph∆∞·ªùng An C∆∞" },
            { name: "Ph∆∞·ªùng H∆∞ng L·ª£i" },
            { name: "Ph∆∞·ªùng An H√≤a" },
            { name: "Ph∆∞·ªùng Th·ªõi B√¨nh" },
            { name: "Ph∆∞·ªùng An Kh√°nh" },
            { name: "Ph∆∞·ªùng An B√¨nh" }
        ]
    }
];

// T·∫°o d·ªØ li·ªáu m·∫´u locations
const seedLocations = async () => {
    try {
        const createdLocations = await Location.insertMany(sampleLocations);
        console.log(`‚úÖ ƒê√£ t·∫°o ${createdLocations.length} locations v·ªõi t·ªïng c·ªông ${sampleLocations.reduce((total, loc) => total + loc.wards.length, 0)} wards`);
        
        // In ra th√¥ng tin chi ti·∫øt
        createdLocations.forEach(location => {
            console.log(`üìç ${location.name}: ${location.wards.length} wards`);
        });
    } catch (error) {
        console.error('‚ùå L·ªói khi t·∫°o locations:', error);
    }
};

// H√†m ch√≠nh
const resetLocations = async () => {
    console.log('üöÄ B·∫Øt ƒë·∫ßu reset d·ªØ li·ªáu locations...\n');
    
    await connectDB();
    
    console.log('üóëÔ∏è  ƒêang x√≥a d·ªØ li·ªáu c≈©...');
    await clearLocations();
    
    console.log('\nüìù ƒêang t·∫°o d·ªØ li·ªáu m·∫´u...');
    await seedLocations();
    
    console.log('\n‚ú® Ho√†n th√†nh reset d·ªØ li·ªáu locations!');
    
    // ƒê√≥ng k·∫øt n·ªëi
    mongoose.connection.close();
    console.log('üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
};

// Ch·∫°y script
if (require.main === module) {
    resetLocations().catch(error => {
        console.error('‚ùå L·ªói chung:', error);
        process.exit(1);
    });
}

module.exports = { resetLocations, clearLocations, seedLocations };